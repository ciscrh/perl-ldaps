LDAP Entry Files
~~~~~~~~~~~~~~~~

LDAP entry files are generated by or used as input for several of the LDAP Perl scripts:

	* ldapSearch.pl outputs simple LDAP Entry records to STDOUT
	* ldapAdd.pl uses simple LDAP Entry record input files
	* ldapModBatch.pl uses advanced LDAP Entry record input files
	* ldapModify.pl can use DN lines from LDAP Entry record input files
	* ldapDelete.pl can use DN lines from LDAP Entry record input files

An LDAP entry file consists of one or more LDAP entry records starting with a dn line. The formatting of LDAP entry records are similar to LDIF records and are used for similar purposes (eg: creating, modifying and deleting directory objects). However, LDAP entry files employ a simpler and more relaxed syntax. The ldapSearch.pl script can be used to generate basic LDAP Entry files which can, if necessary, be manipulated in a text editor to provide suitable LDAP entry files as input to the other scripts.

The ldapSearch.pl script cannot make use of LDAP entry files directly as input because it expects an LDAP filter as input, not an LDAP entry record. However, it is relatively easy to convert a file consisting of LDAP entry DNs to LDAP filter records using a text editor.

Simple Syntax
~~~~~~~~~~~~~

The following panel shows typical simple LDAP entry file output generated by the ldapSearch.pl script (with comment lines added afterwards):

# comment line
dn: fullDN1
  attribute1: value1
  attribute1: value2
  attribute2: value3
  attribute3: value4

dn: fullDN2
  attribute1: value5
  attribute3: value6
  attribute4: value7
  attribute4: value8

Comment lines are prefixed with a # character and liberal use is made of whitespace (tabs, spaces and newlines) to make the output more easily understood. Scripts using this data as input skip over comment and blank lines, superfluous whitespace and ignore any other lines that cannot be parsed.

Such output, suitably edited, can be used as input to other scripts, and when used in this mode the attribute names are case insensitive. The following data can be used as an input file for the ldapAdd.pl script to generate objects in the directory. The order of the lines is mostly irrelevant apart from each dn line marks the beginning of a new object and all subsequent attribute lines are associated with that object until the next dn line is reached.

# test data for ldapAdd.pl

# first record
dn: cn=andyCapp,ou=devusers,ou=devcrh,o=shu
objectclass: user
description: created by ldapAdd.pl :-)
description: layabout
givenname: andy
sn: capp
fullName: andy capp
edupersonentitlement:urn:mace:dir:entitlement:common-lib-terms
objectclass: eduperson
edupersonaffiliation : dosser
uniqueid: andycapp
description: good for nothing
edupersonaffiliation : member

# second record
dn: cn=chalkieWhite,ou=devusers,ou=devcrh,o=shu
objectclass: user
objectclass: eduperson
edupersonentitlement: urn:mace:dir:entitlement:common-lib-terms
edupersonaffiliation : dosser
edupersonaffiliation : member
description: created by ldapAdd.pl :-)
description: snooker shark
givenname: charlie
sn: white
fullName: charlie white
description : the dees bees
uniqueid: chalkiewhite

#end of file

The userpassword attribute can be used to set passwords, but the way in which it is used varies across directories and it is beyond the scope of this document to describe its use in specific directories; use the LDIF documentation available for a given directory as a starting point.

The same data can be used as input to the ldapModify.pl and ldapDelete.pl scripts, which only use the dn lines and simply ignore all other lines. This illustrates one of the primary design objectives of entry records and differs markedly from the rigid syntax and use of LDIF records.

Advanced Syntax
~~~~~~~~~~~~~~~

The ldapModBatch.pl script uses entry files for input but introduces the concept of changemodes to control how the data is processed. Five changemodes are defined:

• add
• replace
• delete

• move
• rename

The first three define how subsequent attribute lines are interpreted and the last two trigger move and rename operations on the current object defined by the previous dn line.

The following panel shows typical input data used by the ldapModBatch.pl script

dn: cn=ascrh,ou=cis-test,ou=student,o=SHU
move:: ou=student,o=shu
changemode:: replace
  workforceID: 999-aaa
  givenName: Christopher
changemode:: replace
  description: 1420
rename:: cn=ascrh1

dn: cn=syscrh,ou=cis-test,ou=student,o=SHU
# inherits replace changemode from previous dn 
  workforceID: 31415927
changemode:: delete
  initials: R
changemode:: replace
  givenName: Christopher
changemode:: add
  description: 1420
  description: 1426
rename:: cn=syscrh1
move:: ou=student,o=shu

Most scripts that use simple formatting are aware of the changemode syntax and ignore it without raising errors. Each changemode line sets the current changemode which remains in force until updated by a subsequent changemode line. The ldapModBatch.pl script can also define the default  add|replace|delete changemode as an input parameter, allowing the LDAP entry file to just provide DNs and attribute/value lines. As each DN is processed it initially sets the change mode to the default value, if defined, or to the last changemode set by a previous DN, if defined.

Other Considerations
~~~~~~~~~~~~~~~~~~~~

All the Perl scripts have -d (debug mode) and -q (quiet mode) switches. The debug mode is provided primarily for script development/debugging and generates very, very verbose output. However, debug mode can be used to investigate how the script is processing entry files if it is not behaving as expected. The quiet mode suppresses some informational messages that aren't required if running the scripts with known good data (including well behaved entry files). The -d and -q switches aren't mutually exclusive, although there are not many occasions when it would make much sense invoking them both at the same time. In normal use, don't invoke either switch and don't invoke -d unless deep into debugging mode.
